#!/usr/bin/env bash

# gnuhealth-control
# The GNU Health control center 

##############################################################################
#
#    GNU Health: The Free Health and Hospital Information System
#    Copyright (C) 2008-2014  Luis Falcon <falcon@gnu.org>
#
#    This program is free software: you can redistribute it and/or modify
#    it under the terms of the GNU General Public License as published by
#    the Free Software Foundation, either version 3 of the License, or
#    (at your option) any later version.
#
#    This program is distributed in the hope that it will be useful,
#    but WITHOUT ANY WARRANTY; without even the implied warranty of
#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#    GNU General Public License for more details.
#
#    You should have received a copy of the GNU General Public License
#    along with this program.  If not, see <http://www.gnu.org/licenses/>.
#
##############################################################################

VERSION="0.0.1"

TRYTON_URL="http://downloads.tryton.org"

usage()
{
    cat << EOF

usage: `basename $0` command [options]

Command:
 
  version : Show version
  backup  : Backup he gnuhealth kernel, attach dir and database
  update  : Download and install the patches
  status  : Show environment and GNU Health Tryton server status

Options:

 --backdir  : destination directory for the backup file
 --dry-run  : Check, download and preview, but don't actually update process
 --database : database name to use with the update or backup command 

EOF
    exit 0
}

help()
{
    cat << EOF
    The GNU Health Control Center (gnuhealth-control) is the main tool for 
    administrative tasks of the GNU Health environment.
    
    It can perform backups and updates of the instance.
    
    Updates
    -------

    When gnuhealth-control is invoked with the update command, 
    it will update GNU Health components within the same major number
    The following components will be checked and updated if necessary

        - Trytond : Tryton server version
        - GNU Health patchsets

    This will be valid for version with the same major, minor numbers, for example
    2.8.x will look for the latest tryton updates and GNU Health updates
    associated to that release.

    GNU Health Control Center is available for release 2.8 and newer.
    You can get the latest version of GNU Health update at GNU
    ftp://ftp.gnu.org/gnu/health


EOF
    usage
    exit 0
}

cli_msg()
{
    local UTC="$(date -u +'%Y-%m-%d %H:%M:%S')"
    
    case $1 in
      ERROR ) echo -e "\e[00;31m${UTC} [ERROR] $2\e[00m";;
      WARNING ) echo -e "\e[0;33m${UTC} [WARNING] $2\e[m" ;;
      INFO ) echo -e "\e[0;36m${UTC} [INFO] $2\e[m" ;;
    esac
}

get_current_values()
{
    # Bail out if no GNU Health profile exists
    if [ ! -e $HOME/.gnuhealthrc ]
    then
        cli_msg "ERROR" "No GNU Health profile found !"
        exit 1
    fi
    
    # Stop if it can't find the GNU Health version
    if [ -z "$GNUHEALTH_VERSION" ]
    then
        cli_msg "ERROR" "Could not find the GNU Health version env. variable"
        exit 1
    fi
    
    cli_msg "INFO" "Environment variables"
    cli_msg "INFO" "GNUHEALTH_VERSION = ${GNUHEALTH_VERSION}"
    cli_msg "INFO" "TRYTON VERSION = ${TRYTON_VERSION}"
    cli_msg "INFO" "PYTHONPATH = $PYTHONPATH"
    
}

do_backup()
{
    local COMMAND=$1
    local BACKDATE=`date -u +%Y-%m-%d_%H%M%S`
    local LOCKFILE="/tmp/.gnuhealth_backup.lock"
    local INFOFILE="/tmp/gnuhealth_backup.log"
    local BACKDIR=""
    local DB=""

    shift # Remove the command and deal only with the options
    
    if [ $# -ne 4 ]; then
        echo -e "Usage : gnuhealth-control backup --backdir <directory> --database <dbname>"
        exit
    fi

    for option in "$@"
    do
      case $option in
          --backdir ) BACKDIR=$2;;
          --database ) DB=$2 ;;
      esac
      shift
    done
    
    if [ -f $LOCKFILE ]
    then
        cli_msg "ERROR" "Backup in progress or stale lock file found ..." | tee -a $INFOFILE
        exit 1
    fi

    touch $LOCKFILE
    
    # Backup start

    cli_msg "INFO" "START Database Backup" | tee -a $INFOFILE
    
    pg_dump $DB > $BACKDIR/backup\_$DB\_$BACKDATE || exit 1 

    cli_msg "INFO" "Compressing Database Backup" | tee -a $INFOFILE

    gzip "${BACKDIR}/backup_${DB}_${BACKDATE}" || exit 1
    
    cli_msg "INFO" "Creating compressed tarball with DB and GNU Health home directory" | tee -a $INFOFILE

    tar -cvf "${BACKDIR}/gnuhealth_${DB}_with_fs_backup_${BACKDATE}.tar.gz" $HOME || exit 1

    cli_msg "INFO" "Backup Successful" | tee -a $INFOFILE

    #Remove lock file
    rm $LOCKFILE

}

check_status()
{
  get_current_values
}

check_updates()
{
    source $HOME/.gnuhealthrc
    local TRYTOND_PATCHLEVEL=`echo ${TRYTON_VERSION} | cut -d'.' -f3`
    local UPDATES=""
    local TRYTON_MODULES=`cd ${GNUHEALTH_DIR}/tryton/server/modules; ls -1d trytond*`
    local TRYTON_MAJOR_MINOR=`echo $TRYTON_VERSION | cut -d'.' -f1-2`
    
    cli_msg "INFO" "TRYTON SERVER : Checking latest patchlevel"
    
    LATEST_TRYTOND=`wget --quiet -O - ${TRYTON_URL}/${TRYTON_MAJOR_MINOR} | egrep -o trytond-${TRYTON_MAJOR_MINOR}.[0-9\.]+.tar.gz | sort -V | tail -1`
    local LATEST_TRYTOND_PATCHLEVEL=`echo ${LATEST_TRYTOND} | cut -d'.' -f3`

    # Check latest tryton server compared to the local version
    if (( ${TRYTOND_PATCHLEVEL} < ${LATEST_TRYTOND_PATCHLEVEL} )); then
        cli_msg "WARNING" "TRYTON SERVER patchlevel ${TRYTOND_PATCHLEVEL} is outdated ! A newer version is available (${LATEST_TRYTOND})"
        NEED_UPDATE_TRYTOND=1
    else
        cli_msg "INFO" "TRYTON SERVER patchlevel ${TRYTOND_PATCHLEVEL} is at the latest version"
    fi
    
    for MODULE in ${TRYTON_MODULES}; do
        MODNAME=`echo $MODULE | cut -d'-' -f1`
        MODULE_PATCHLEVEL=`echo $MODULE | sed  's/^.*\.\([[:digit:]]*\)$/\1/'`
        LATEST_MODULE=`wget --quiet -O - ${TRYTON_URL}/${TRYTON_MAJOR_MINOR} | egrep -o ${MODNAME}-${TRYTON_MAJOR_MINOR}.[0-9\.]+.tar.gz | sort -V | tail -1`
        LATEST_MODULE_PATCHLEVEL=`echo ${LATEST_MODULE} | cut -d'.' -f3`
        if (( ${MODULE_PATCHLEVEL} < ${LATEST_MODULE_PATCHLEVEL} )); then
            cli_msg "WARNING" "${MODNAME} patchlevel ${MODULE_PATCHLEVEL} is outdated ! A newer version is available (${LATEST_MODULE})"
            UPDATES="$UPDATES ${LATEST_MODULE}"
        else
            cli_msg "INFO" "${MODNAME} patchlevel ${MODULE_PATCHLEVEL} is at the latest version"
        fi

    done

}


install_updates()
{
    
}
do_update()
{
    get_current_values
    check_updates
    install_updates
   
}
    
parse_command_line()
{
    if [ $# -eq 0 ]; then
        usage
    fi
    
    case $1 in
        version) echo $VERSION;;
        backup) do_backup $@;;
        update) do_update;;
        status) check_status;;
        help) help;;
        *) echo $1: Unrecognized command; exit 1;;
    esac
}

parse_command_line $@



